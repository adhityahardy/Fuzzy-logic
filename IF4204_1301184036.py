# -*- coding: utf-8 -*-
"""TUAI2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fnsTC_gcIZVb000JE0BTysEdyuvwhxC1
"""

import matplotlib.pyplot as plt
import pandas as pd
import xlrd

!pip install xlrd

filename = pd.read_excel("Mahasiswa.xls")
print(filename)

def penghasilanBesar(x):
    if(x >= 12):
        return 1
    elif(x < 8):
        return 0
    else:
        return (x-8)/(12-8)

def penghasilanSedang(x):
    if(x <= 3 or x > 12):
        return 0
    elif(x > 5 and x <= 8):
        return 1
    elif(x > 3 and x <= 5):
        return (x-3)/(5-3)
    elif (x > 8 and x <= 12):
        return (12-x)/(12-8)

def penghasilanKecil(x):
    if(x <= 3):
        return 1
    elif(x > 5):
        return 0
    else:
        return (3-x)/(5-3)

def pengeluaranBesar(y):
    if(y >= 11):
        return 1
    elif(y < 8):
        return 0
    else:
        return (y-8)/(11-8)

def pengeluaranSedang(y):
    if(y <= 2 or y > 11):
        return 0
    elif(y > 5 and y <= 8):
        return 1
    elif(y > 2 and y <= 5):
        return (y-2)/(5-2)
    elif (y > 8 and y <= 11):
        return (11-y)/(11-8)

def pengeluaranKecil(y):
    if(y <= 2):
        return 1
    elif(y > 5):
        return 0
    else:
        return (5-y)/(5-2)

x1 = [0,3,5,20]
y1 = [1,1,0,0]
x2 = [0,3,5,8,12,20]
y2 = [0,0,1,1,0,0]
x3 = [0,8,12,20]
y3 = [0,0,1,1]
plt.plot(x1,y1,label="Penghasilan Sedikit")
plt.plot(x2,y2,label="Penghasilan Sedang")
plt.plot(x3,y3,label="Penghasilan Banyak")
plt.legend()
plt.show()

x1 = [0,2,5,13]
y1 = [1,1,0,0]
x2 = [0,2,5,8,11,13]
y2 = [0,0,1,1,0,0]
x3 = [0,8,11,13]
y3 = [0,0,1,1]
plt.plot(x1,y1,label="Pengeluaran Rendah")
plt.plot(x2,y2,label="Pengeluaran Sedang")
plt.plot(x3,y3,label="Pengeluaran Tinggi")
plt.legend()
plt.show()

arrPenghasilan = ['low','mid','high']
arrPengeluaran = ['rendah','sedang','tinggi']

def FuzzyRules(dapatLabel, keluarLabel, dapat, keluar, id):
    output = []
    if (keluarLabel[0] == 'rendah' and dapatLabel[0] == 'low'):
        output.append(['dipertimbangkan', (dapat[id][1] and keluar[id][1])])
    if (keluarLabel[0] == 'rendah' and dapatLabel[1] == 'mid'):
        output.append(['layak', (dapat[id][1] and keluar[id][2])])
    if (keluarLabel[0] == 'rendah' and dapatLabel[2] == 'high'):
        output.append(['layak', (dapat[id][1] and keluar[id][3])])
    if (keluarLabel[1] == 'sedang' and dapatLabel[0] == 'low'):
        output.append(['tidak', (dapat[id][2] and keluar[id][1])])
    if (keluarLabel[1] == 'sedang' and dapatLabel[1] == 'mid'):
        output.append(['dipertimbangkan', (dapat[id][2] and keluar[id][2])])
    if (keluarLabel[1] == 'sedang' and dapatLabel[2] == 'high'):
        output.append(['layak', (dapat[id][2] and keluar[id][3])])
    if (keluarLabel[2] == 'tinggi' and dapatLabel[0] == 'low'):
        output.append(['tidak', (dapat[id][3] and keluar[id][1])])
    if (keluarLabel[2] == 'tinggi' and dapatLabel[1] == 'mid'):
        output.append(['tidak', (dapat[id][3] and keluar[id][2])])
    if (keluarLabel[2] == 'tinggi' and dapatLabel[2] == 'high'):
        output.append(['tidak', (dapat[id][3] and keluar[id][3])])
    return output

def defuzzification(inferensi):
    a = ((inferensi[0] * 50) + (inferensi[1] * 70) + (inferensi[2] * 100))
    b = inferensi[0] + inferensi[1] + inferensi[2]
    return a / b

plt.axvline(x=0, color='white')
plt.axvline(x=50, color='red', label='tidak')
plt.axvline(x=70, color='orange', label='dipertimbangkan')
plt.axvline(x=100, color = 'green', label='layak')
plt.legend()
plt.show()

nil_dapat = []
for i in range(len(filename)):
    nilai = []
    nilai.append(filename["Id"][i])
    nilai.append(penghasilanKecil(filename["Penghasilan"][i]))
    nilai.append(penghasilanSedang(filename["Penghasilan"][i]))
    nilai.append(penghasilanBesar(filename["Penghasilan"][i]))
    nil_dapat.append(nilai)
    
nil_keluar = []
for i in range(len(filename)):
    nilai = []
    nilai.append(filename["Id"][i])
    nilai.append(pengeluaranKecil(filename["Pengeluaran"][i]))
    nilai.append(pengeluaranSedang(filename["Pengeluaran"][i]))
    nilai.append(pengeluaranBesar(filename["Pengeluaran"][i]))
    nil_keluar.append(nilai)

p = nil_keluar[0]
x = 1 
q = nil_dapat[0]

defuzzy = []
for i in range(len(filename)):
    # print("i: ",i)
    result = FuzzyRules(arrPenghasilan, arrPengeluaran, nil_dapat, nil_keluar, i)
    # print("Result: ",result)
    t = []
    d = []
    l = []
    for j in range(len(result)):
        if (result[j][0] == 'tidak'):
            t.append(result[j][1])
        if (result[j][0] == 'dipertimbangkan'):
            d.append(result[j][1])
        if (result[j][0] == 'layak'):
            l.append(result[j][1])
    inferensi = []
    inferensi.append(max(t[0],t[1],t[2],t[3]))
    inferensi.append(max(d[0],d[1]))
    inferensi.append(max(l[0],l[1],l[2]))
    # print("inference",inferensi)
    defuzzy.append([defuzzification(inferensi),i+1])
    # print("defuzzy: ",defuzzy)

def fuzzyResult(defuzzy):
    result = []
    for i in range(20):
        result.append(defuzzy[i][1])
    return result

defuzzy.sort(reverse=True)
result = fuzzyResult(defuzzy)
result.sort()
print(result)

!pip install xlsxwriter

excel = pd.DataFrame({'Id Mahasiswa': result})
writer = pd.ExcelWriter('Bantuan.xlsx', engine='xlsxwriter')
excel.to_excel(writer, sheet_name='Sheet1')
writer.save()